generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String                   @id @default(cuid())
  email                String                   @unique
  phone                String?                  @unique
  name                 String
  avatar               String?
  role                 UserRole                 @default(USER)
  isActive             Boolean                  @default(true)
  panCard              String?                  @unique
  aadharCard           String?
  kycStatus            KYCStatus                @default(PENDING)
  kycDocuments         Json?
  kycVerifiedAt        DateTime?
  supabaseId           String                   @unique
  emailVerified        Boolean                  @default(false)
  phoneVerified        Boolean                  @default(false)
  referralCode         String?                  @unique
  referredBy           String?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  lastLoginAt          DateTime?
  affiliate            Affiliate?
  bankDetails          BankDetail[]
  blogPosts            BlogPost[]
  commissions          Commission[]
  enrollments          Enrollment[]
  subscriptions        NewsletterSubscription[]
  notifications        Notification[]
  packagePurchases     PackagePurchase[]
  payoutRequests       PayoutRequest[]
  referrals            Referral[]               @relation("ReferredUser")
  transactions         Transaction[]
  processedWithdrawals WithdrawalRequest[]      @relation("ProcessedWithdrawals")
  withdrawalRequests   WithdrawalRequest[]

  @@map("users")
}

model Package {
  id              String            @id
  name            String
  basePrice       Float
  gst             Float
  finalPrice      Float
  features        Json
  commissionRates Json
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  purchases       PackagePurchase[]

  @@map("packages")
}

model PackagePurchase {
  id                String         @id @default(cuid())
  userId            String
  packageId         String
  amount            Float
  status            PurchaseStatus @default(PENDING)
  razorpayOrderId   String?
  razorpayPaymentId String?
  purchasedAt       DateTime       @default(now())
  expiresAt         DateTime?
  createdAt         DateTime       @default(now())
  commissions       Commission[]
  package           Package        @relation(fields: [packageId], references: [id])
  user              User           @relation(fields: [userId], references: [id])

  @@map("package_purchases")
}

model Affiliate {
  id                    String       @id @default(cuid())
  userId                String       @unique
  referralCode          String       @unique
  parentId              String?
  packageType           PackageType
  packagePrice          Float
  purchaseDate          DateTime
  commissionRate        Float        @default(0.10)
  totalDirectEarnings   Float        @default(0)
  totalIndirectEarnings Float        @default(0)
  totalWithdrawn        Float        @default(0)
  currentBalance        Float        @default(0)
  isActive              Boolean      @default(true)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  parent                Affiliate?   @relation("AffiliateHierarchy", fields: [parentId], references: [id])
  children              Affiliate[]  @relation("AffiliateHierarchy")
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  directCommissions     Commission[] @relation("DirectCommissions")
  indirectCommissions   Commission[] @relation("IndirectCommissions")
  referrals             Referral[]

  @@map("affiliates")
}

model Commission {
  id                String           @id @default(cuid())
  userId            String
  sourceUserId      String
  packagePurchaseId String
  amount            Float
  type              CommissionType
  level             Int
  affiliateId       String?
  fromAffiliateId   String?
  transactionId     String?
  status            CommissionStatus @default(PENDING)
  paidAt            DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  affiliate         Affiliate?       @relation("DirectCommissions", fields: [affiliateId], references: [id])
  fromAffiliate     Affiliate?       @relation("IndirectCommissions", fields: [fromAffiliateId], references: [id])
  packagePurchase   PackagePurchase  @relation(fields: [packagePurchaseId], references: [id])
  transaction       Transaction?     @relation(fields: [transactionId], references: [id])
  user              User             @relation(fields: [userId], references: [id])

  @@map("commissions")
}

model PayoutRequest {
  id             String       @id @default(cuid())
  userId         String
  amount         Float
  paymentDetails Json
  status         PayoutStatus @default(PENDING)
  requestedAt    DateTime     @default(now())
  processedAt    DateTime?
  user           User         @relation(fields: [userId], references: [id])

  @@map("payout_requests")
}

model Transaction {
  id              String            @id @default(cuid())
  userId          String
  amount          Float
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  paymentId       String?
  paymentMethod   String?
  gatewayResponse Json?
  description     String?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  processedAt     DateTime?
  commissions     Commission[]
  enrollment      Enrollment?
  user            User              @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Referral {
  id               String    @id @default(cuid())
  affiliateId      String
  referredUserId   String
  commissionEarned Float     @default(0)
  createdAt        DateTime  @default(now())
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  referredUser     User      @relation("ReferredUser", fields: [referredUserId], references: [id])

  @@unique([affiliateId, referredUserId])
  @@map("referrals")
}

model Course {
  id               String         @id @default(cuid())
  title            String
  description      String?
  shortDescription String?
  videoUrl         String?
  thumbnailUrl     String?
  duration         Int?
  price            Float
  packageTypes     PackageType[]
  isActive         Boolean        @default(true)
  isPublished      Boolean        @default(false)
  slug             String         @unique
  metaTitle        String?
  metaDescription  String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  publishedAt      DateTime?
  modules          CourseModule[]
  enrollments      Enrollment[]

  @@map("courses")
}

model CourseModule {
  id          String         @id @default(cuid())
  courseId    String
  title       String
  description String?
  videoUrl    String?
  duration    Int?
  order       Int
  isActive    Boolean        @default(true)
  isFree      Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    UserProgress[]

  @@map("course_modules")
}

model Enrollment {
  id              String           @id @default(cuid())
  userId          String
  courseId        String
  transactionId   String           @unique
  progressPercent Float            @default(0)
  completedAt     DateTime?
  certificateUrl  String?
  status          EnrollmentStatus @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  course          Course           @relation(fields: [courseId], references: [id])
  transaction     Transaction      @relation(fields: [transactionId], references: [id])
  user            User             @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
}

model UserProgress {
  id              String       @id @default(cuid())
  userId          String
  moduleId        String
  watchedDuration Int          @default(0)
  isCompleted     Boolean      @default(false)
  completedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  module          CourseModule @relation(fields: [moduleId], references: [id])

  @@unique([userId, moduleId])
  @@map("user_progress")
}

model BlogPost {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         String
  excerpt         String?
  featuredImage   String?
  authorId        String
  metaTitle       String?
  metaDescription String?
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  viewCount       Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id])

  @@map("blog_posts")
}

model NewsletterSubscription {
  id             String    @id @default(cuid())
  email          String    @unique
  userId         String?
  isActive       Boolean   @default(true)
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
  user           User?     @relation(fields: [userId], references: [id])

  @@map("newsletter_subscriptions")
}

model BankDetail {
  id                 String              @id @default(cuid())
  userId             String
  bankName           String
  accountNumber      String
  ifscCode           String
  accountHolderName  String
  isVerified         Boolean             @default(false)
  isDefault          Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id])
  withdrawalRequests WithdrawalRequest[]

  @@map("bank_details")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  readAt    DateTime?
  actionUrl String?
  metadata  Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model WithdrawalRequest {
  id            String           @id @default(cuid())
  userId        String
  amount        Float
  bankDetailId  String?
  status        WithdrawalStatus @default(PENDING)
  adminNotes    String?
  processedById String?
  processedAt   DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  bankDetail    BankDetail?      @relation(fields: [bankDetailId], references: [id])
  processedBy   User?            @relation("ProcessedWithdrawals", fields: [processedById], references: [id])
  user          User             @relation(fields: [userId], references: [id])

  @@map("withdrawal_requests")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum KYCStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}

enum PackageType {
  SILVER
  GOLD
  PLATINUM
}

enum CommissionType {
  DIRECT
  INDIRECT
  BONUS
  WITHDRAWAL
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum TransactionType {
  COURSE_PURCHASE
  COMMISSION_EARNED
  WITHDRAWAL
  REFUND
  BONUS
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum NotificationType {
  COMMISSION_EARNED
  COURSE_ENROLLED
  KYC_UPDATE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  GENERAL
}

enum PurchaseStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}
