// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model with KYC verification
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  phone             String?  @unique
  name              String
  avatar            String?
  
  // KYC Information
  panCard           String?  @unique
  aadharCard        String?
  kycStatus         KYCStatus @default(PENDING)
  kycDocuments      Json?
  kycVerifiedAt     DateTime?
  
  // Authentication
  supabaseId        String   @unique
  emailVerified     Boolean  @default(false)
  phoneVerified     Boolean  @default(false)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  affiliate         Affiliate?
  transactions      Transaction[]
  enrollments       Enrollment[]
  bankDetails       BankDetail[]
  notifications     Notification[]
  subscriptions     NewsletterSubscription[]
  blogPosts         BlogPost[]
  referrals         Referral[] @relation("ReferredUser")
  
  @@map("users")
}

// Affiliate/Referral System
model Affiliate {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  referralCode    String   @unique
  parentId        String?
  parent          Affiliate? @relation("AffiliateHierarchy", fields: [parentId], references: [id])
  children        Affiliate[] @relation("AffiliateHierarchy")
  
  // Package Information
  packageType     PackageType
  packagePrice    Float
  purchaseDate    DateTime
  
  // Commission Stats
  totalDirectEarnings    Float @default(0)
  totalIndirectEarnings  Float @default(0)
  totalWithdrawn         Float @default(0)
  currentBalance         Float @default(0)
  
  // Status
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  directCommissions     Commission[] @relation("DirectCommissions")
  indirectCommissions   Commission[] @relation("IndirectCommissions")
  referrals            Referral[]
  
  @@map("affiliates")
}

// Commission Tracking
model Commission {
  id              String   @id @default(cuid())
  
  // Commission details
  amount          Float
  commissionType  CommissionType
  level           Int // 1 for direct, 2 for indirect
  
  // Related affiliate and transaction
  affiliateId     String
  affiliate       Affiliate @relation("DirectCommissions", fields: [affiliateId], references: [id])
  
  fromAffiliateId String?
  fromAffiliate   Affiliate? @relation("IndirectCommissions", fields: [fromAffiliateId], references: [id])
  
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id])
  
  // Status
  status          CommissionStatus @default(PENDING)
  paidAt          DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("commissions")
}

// Transaction Management
model Transaction {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  // Transaction Details
  amount          Float
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  
  // Payment Information
  paymentId       String?
  paymentMethod   String?
  gatewayResponse Json?
  
  // Metadata
  description     String?
  metadata        Json?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  processedAt     DateTime?
  
  // Relations
  commissions     Commission[]
  enrollment      Enrollment?
  
  @@map("transactions")
}

// Referral Tracking
model Referral {
  id              String   @id @default(cuid())
  affiliateId     String
  affiliate       Affiliate @relation(fields: [affiliateId], references: [id])
  
  referredUserId  String
  referredUser    User     @relation("ReferredUser", fields: [referredUserId], references: [id])
  
  // Commission earned from this referral
  commissionEarned Float  @default(0)
  
  createdAt       DateTime @default(now())
  
  @@unique([affiliateId, referredUserId])
  @@map("referrals")
}

// Course Management
model Course {
  id              String   @id @default(cuid())
  title           String
  description     String?
  shortDescription String?
  
  // Content
  videoUrl        String?
  thumbnailUrl    String?
  duration        Int? // in minutes
  
  // Pricing
  price           Float
  packageTypes    PackageType[] // Which packages can access this course
  
  // Status
  isActive        Boolean  @default(true)
  isPublished     Boolean  @default(false)
  
  // SEO
  slug            String   @unique
  metaTitle       String?
  metaDescription String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  publishedAt     DateTime?
  
  // Relations
  enrollments     Enrollment[]
  modules         CourseModule[]
  
  @@map("courses")
}

// Course Modules/Lessons
model CourseModule {
  id              String   @id @default(cuid())
  courseId        String
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  videoUrl        String?
  duration        Int? // in minutes
  order           Int
  
  isActive        Boolean  @default(true)
  isFree          Boolean  @default(false) // Some modules can be free preview
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  progress        UserProgress[]
  
  @@map("course_modules")
}

// User Course Enrollment
model Enrollment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  courseId        String
  course          Course   @relation(fields: [courseId], references: [id])
  
  transactionId   String   @unique
  transaction     Transaction @relation(fields: [transactionId], references: [id])
  
  // Progress
  progressPercent Float    @default(0)
  completedAt     DateTime?
  certificateUrl  String?
  
  // Status
  status          EnrollmentStatus @default(ACTIVE)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

// User Progress Tracking
model UserProgress {
  id              String   @id @default(cuid())
  userId          String
  moduleId        String
  module          CourseModule @relation(fields: [moduleId], references: [id])
  
  // Progress
  watchedDuration Int      @default(0) // in seconds
  isCompleted     Boolean  @default(false)
  completedAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, moduleId])
  @@map("user_progress")
}

// Blog System
model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String
  excerpt         String?
  
  // Media
  featuredImage   String?
  
  // Author
  authorId        String
  author          User     @relation(fields: [authorId], references: [id])
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Status
  isPublished     Boolean  @default(false)
  publishedAt     DateTime?
  
  // Stats
  viewCount       Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("blog_posts")
}

// Newsletter System
model NewsletterSubscription {
  id              String   @id @default(cuid())
  email           String   @unique
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  
  isActive        Boolean  @default(true)
  subscribedAt    DateTime @default(now())
  unsubscribedAt  DateTime?
  
  @@map("newsletter_subscriptions")
}

// Bank Details for Payouts
model BankDetail {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  bankName        String
  accountNumber   String
  ifscCode        String
  accountHolderName String
  
  isVerified      Boolean  @default(false)
  isDefault       Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("bank_details")
}

// Notification System
model Notification {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  title           String
  message         String
  type            NotificationType
  
  isRead          Boolean  @default(false)
  readAt          DateTime?
  
  // Metadata
  actionUrl       String?
  metadata        Json?
  
  createdAt       DateTime @default(now())
  
  @@map("notifications")
}

// Enums
enum KYCStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}

enum PackageType {
  SILVER
  GOLD
  PLATINUM
}

enum CommissionType {
  DIRECT_REFERRAL
  INDIRECT_REFERRAL
  BONUS
  WITHDRAWAL
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum TransactionType {
  COURSE_PURCHASE
  COMMISSION_EARNED
  WITHDRAWAL
  REFUND
  BONUS
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum NotificationType {
  COMMISSION_EARNED
  COURSE_ENROLLED
  KYC_UPDATE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  GENERAL
}